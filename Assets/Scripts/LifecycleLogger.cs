using UnityEngine;

public class LifecycleLogger : MonoBehaviour
{
    // 1. Awake()
    // Вызывается один раз за всю жизнь объекта, как только он создается.
    // Часто используется для инициализации переменных или ссылок (GetComponent).
    // Вызывается до Start().
    void Awake()
    {
        Debug.Log("1. AWAKE: Объект '" + gameObject.name + "' проснулся!");
    }

    // 2. OnEnable()
    // Вызывается, когда объект (или компонент) становится активным.
    // Происходит после Awake() и перед Start().
    void OnEnable()
    {
        Debug.Log("2. ON ENABLE: Объект '" + gameObject.name + "' стал активным.");
    }

    // 3. Start()
    // Вызывается один раз перед первым кадром, в котором объект активен.
    // Вызывается после Awake() и OnEnable().
    // Используется для логики, которая требует, чтобы все другие объекты уже были созданы (прошли свой Awake).
    void Start()
    {
        Debug.Log("3. START: Объект '" + gameObject.name + "' начал свою работу.");

        // Запланируем уничтожение объекта через 5 секунд, чтобы увидеть OnDestroy()
        Destroy(gameObject, 5f);
    }

    // 4. FixedUpdate()
    // Вызывается фиксированное количество раз в секунду (по умолчанию 50 раз/сек).
    // НЕ зависит от частоты кадров. Используется для работы с физикой (Rigidbody).
    // Мы не будем выводить его в лог каждый раз, чтобы не засорять консоль.
    void FixedUpdate()
    {
        // Здесь обычно находится физика, например, rb.AddForce()
    }

    // 5. Update()
    // Вызывается один раз в каждом кадре.
    // Частота вызова зависит от производительности (FPS).
    // Используется для обработки ввода, игровой логики, которая не связана с физикой.
    void Update()
    {
        // Здесь обычно находится обработка ввода, например, Input.GetAxis()
    }

    // 6. LateUpdate()
    // Вызывается один раз в кадре, но ПОСЛЕ всех вызовов Update().
    // Часто используется для логики камеры, чтобы она следовала за персонажем, который уже подвинулся в Update().
    void LateUpdate()
    {
        // Логика камеры, например
    }

    // 7. OnDisable()
    // Вызывается, когда объект (или компонент) становится неактивным.
    // Например, если выключить его галочкой в инспекторе.
    void OnDisable()
    {
        Debug.Log("7. ON DISABLE: Объект '" + gameObject.name + "' стал неактивным.");
    }

    // 8. OnDestroy()
    // Вызывается перед тем, как объект будет уничтожен.
    // Используется для "очистки": отписаться от событий, сохранить данные и т.д.
    void OnDestroy()
    {
        Debug.Log("8. ON DESTROY: Объект '" + gameObject.name + "' уничтожается!");
    }
}